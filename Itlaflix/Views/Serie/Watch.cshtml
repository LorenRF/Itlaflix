@* Strong type views *@
@using Itlaflix.Core.Application.ViewModel
@using Itlaflix.Core.Application.ViewModel.season
@using Itlaflix.Core.Domain.Entities

@model List<SeasonViewModel>
@{
    ViewData["Title"] = $"Episodios de la temporada";
}

<div class="container-fluid">
    @foreach (SeasonViewModel seasonViewModel in Model)
    {
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
            <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
                <h5 style="width: 300px; margin: 50px;">Temporada @seasonViewModel.SeasonNumber</h5>
            </div>
        </div>
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
            <div class="container my-3 mt-5" id="featureContainer">
                <div class="row mx-auto my-auto justify-content-center">
                    <div id="featureCarousel" class="carousel slide" data-bs-ride="carousel">
                        <div class="carousel-inner" role="listbox">
                            <div id="carouselExampleAutoplaying" class="carousel slide text-center" data-bs-ride="carousel">
                                <div class="carousel-inner">
                                    @if (seasonViewModel.Episodes.Where(e => e.SeasonId == seasonViewModel.Id) == null || seasonViewModel.Episodes.Count == 0)
                                    {
                                        <h2>No hay Episodios agregados</h2>
                                    }
                                    else
                                    {
                                        string a = "active";
                                        int i = 0;
                                        @foreach (Episode item in seasonViewModel.Episodes.Where(e => e.SeasonId == seasonViewModel.Id))
                                        {
                                            i++;
                                            if (i > 1)
                                            {
                                                a = "";
                                            }
                                            <div class="carousel-item @Html.Raw(a) ">
                                                <div class="col-md-3">
                                                    <div class="card">
                                                        @{
                                                            int id = item.Id;
                                                        }
                                                        <a asp-controller="Episode" asp-action="Watch" asp-route-id="@id" type="button" class="btn btn-outline-primary">
                                                            <img class="bd-placeholder-img card-img-top" src="@item.imagePath" />
                                                        </a>
                                                        <div class="card-body">
                                                            <h4>@item.Name</h4>
                                                            <p class="card-text">@item.Description</p>
                                                            <div class="">
                                                                <small class="fw-bold fs-6">@item.ReleaseDate</small>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }
                                </div>
                                <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleAutoplaying" data-bs-slide="prev">
                                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Previous</span>
                                </button>
                                <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleAutoplaying" data-bs-slide="next">
                                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Next</span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
<style>
    .container {
  padding-right: 15px;
  padding-left: 15px;
  margin-right: auto;
  margin-left: auto;
}
@@media (min-width: 768px) {
  .container {
    width: 750px;
  }
}
@@media (min-width: 992px) {
  .container {
    width: 970px;
  }
}
@@media (min-width: 1200px) {
  .container {
    width: 1170px;
  }
}
@@media (max-width: 767px) {
  #featureContainer .carousel-inner .carousel-item > div {
    display: none;
  }
  #featureContainer .carousel-inner .carousel-item > div:first-child {
    display: block;
  }
}
#featureContainer .carousel-inner .carousel-item.active,
#featureContainer .carousel-inner .carousel-item-next,
#featureContainer .carousel-inner .carousel-item-prev {
  display: flex;
}
@@media (min-width: 768px) {
  
  #featureContainer .carousel-inner .carousel-item-end.active,
  #featureContainer .carousel-inner .carousel-item-next {
    transform: translateX(25%);
  }
  #featureContainer .carousel-inner .carousel-item-start.active, 
  #featureContainer .carousel-inner .carousel-item-prev {
    transform: translateX(-25%);
  }
  #featureContainer .card img{
    width: 90%;
    height: 40vh;
  }
  #featureContainer .carousel-item{
    justify-content: space-between;
  }
}

@@media (max-width: 767px) {
  #featureContainer .card img{
    width: 100%;
    height: 75vh;
  }
 }
#featureContainer .carousel-inner .carousel-item-end,
#featureContainer .carousel-inner .carousel-item-start { 
  transform: translateX(0);
}
#featureContainer .card{
  border: 0;
}
#featureContainer .card{
  position: relative;
}
#featureContainer .card .card-img-overlays{
  position: absolute;
  bottom: 15%;
  left: 10%;
}
#featureContainer a{
  text-decoration: none;
}
#featureContainer .indicator{
  border: 1px solid rgb(202, 202, 202);
  padding: 3px 6px 3px 6px;
}
#featureContainer .indicator:hover{
  background-color: blue;
  border: 1px solid blue;
  transition: 200ms;
}
#featureContainer .indicator:hover{
  color: white;
  transition: 200ms;
}
#featureContainer .indicator {
  color: lightgray;
}
#featureContainer .float-end{
  padding-top: 10px;
}
</style>

<script>
    let myCarousel = document.querySelectorAll('#featureContainer .carousel .carousel-item');
myCarousel.forEach((el) => {
    const minPerSlide = 4
    let next = el.nextElementSibling
    for (var i = 1; i < minPerSlide; i++) {
        if (!next) {
            // wrap carousel by using first child
            next = myCarousel[0]
        }
        let cloneChild = next.cloneNode(true)
        el.appendChild(cloneChild.children[0])
        next = next.nextElementSibling
    }
})
</script>